#include <iostream>
#include <iomanip>
#include <string>
#include <ctime>
using namespace std;
enum Special { KN, IN, ME, FI, WT };
string Specialities[5] = { "KN","IN","ME","FI","TTI" };
struct Student {
    string LastName;
    int Year;
    int Physics;
    int Math;
    union
    {
        int	Programming;
        int NumericMethods;
        int Pedagogics;
    };
    Special Type_Special;
};

void Print(Student* students, const int size);
void randomPeople(Student* students, int size);
void UserInput(Student* students, int size);
void sortPhysicsPpl(Student* students, int size);
int* IndexSort(Student* students, int size);
void printSortedArray(Student* students, int size);
int Find(Student* students, int size);

void ThirdSubjInit(Student& st, int mark);//утиліти для безболісної перестройки
int GetThirdMark(Student st);

int main()
{
    srand(time(NULL));
    Student* arr = new Student[0];
    int size = 0;
    int choice;

    cout << "Enter array size: ";
    cin >> size;
    arr = new Student[size];
    bool initialized = false;
    do
    {
        cout << "====Menu====" << endl;
        cout << "1.Create a list of students." << endl;
        cout << "2.Print array" << endl;
        cout << "3.Sort your list physically" << endl;
        cout << "4.Sort by index method" << endl;
        cout << "5.Find a student." << endl;
        cout << endl;
        cout << "Enter your choice: "; cin >> choice;
        cout << endl;
        switch (choice)
        {
            case 1:
            {
                initialized = true;
                cout << endl;
                randomPeople(arr, size);
                //UserInput(arr, size);
                Print(arr, size);
                break;
            }
            case 2:
            {
                if (!initialized)
                {
                    cout << "You try to print a not initialized array!" << endl;
                    break;
                }
                else
                {
                    Print(arr, size);
                    cout << endl;
                }
                break;
            }
            case 3:
            {
                cout << endl;
                sortPhysicsPpl(arr, size);
                cout << "done" << endl;
                cout << endl;
                Print(arr, size);
                cout << endl;
                break;
            }
            case 4:
            {
                if (!initialized)
                {
                    cout << "You try to print a not initialized array!" << endl;
                    break;
                }
                else {
                    cout << endl;
                    printSortedArray(arr, size);
                    cout << "done" << endl;
                    cout << endl;
                }
                break;
            }
            case 5:
            {
                if (!initialized)
                {
                    cout << "You try to print a not initialized array!" << endl;
                    break;
                }
                else {
                    cout << endl;	cout << endl;
                    int i = Find(arr, size);
                    if (i != -1)
                    {
                        cout << endl;
                        cout << "==========================================================================" << endl;
                        cout << "Number \t|Name\t|Course   |\tMajor\t | Phys|Math |Progr.|Numer.|Pedag|" << endl;
                        cout << "==========================================================================" << endl;

                        cout << i << "\t| " << arr[i].LastName;
                        cout << " |\t" << arr[i].Year;
                        cout << " |\t" << Specialities[(int)arr[i].Type_Special] << "\t";
                        cout << " |" << setw(3) << arr[i].Physics << setw(3);
                        cout << " |" << setw(3) << arr[i].Math << setw(3);
                        //	cout << " |\t" << GetThirdMark(students[i]);
                        switch (arr[i].Type_Special)
                        {
                            case Special::KN:
                            {
                                cout << "|" << setw(4) << GetThirdMark(arr[i]) << setw(3) << "|" << setw(7) << "|" << setw(6) << "|";
                                break;
                            }
                            case Special::IN:
                            {
                                cout << "|" << setw(7) << "|" << setw(4) << GetThirdMark(arr[i]) << setw(3) << "|" << setw(6) << "|";
                                break;
                            }
                            default:
                            {
                                cout << "|" << setw(7) << "|" << setw(7) << "|" << setw(3) << GetThirdMark(arr[i]) << setw(3) << "|";
                                break;
                            }
                        }
                        cout << endl;

                        cout << "==========================================================================" << endl;
                        cout << endl << endl;
                    }
                    else
                        cout << "Could not find a student." << endl;
                    cout << "done" << endl;
                    cout << endl;
                    cout << endl;
                }
                break;
            }
            default:
            {
                cout << "You entered the incorrect command." << endl;
                break;
            }
        }
    } while (choice != 0);
    system("pause");
}

void Print(Student* students, int size)
{
    cout << endl;
    cout << "==========================================================================" << endl;
    cout << "Number \t|Name\t|Course   |\tMajor\t | Phys|Math |Progr.|Numer.|Pedag|" << endl;
    cout << "==========================================================================" << endl;
    for (size_t i = 0; i < size; i++)
    {
        cout << i << "\t| " << students[i].LastName;
        cout << " |\t" << students[i].Year;
        cout << " |\t" << Specialities[(int)students[i].Type_Special] << "\t";
        cout << " |" << setw(3) << students[i].Physics << setw(3);
        cout << " |" << setw(3) << students[i].Math << setw(3);
        //	cout << " |\t" << GetThirdMark(students[i]);
        switch (students[i].Type_Special)
        {
            case Special::KN:
            {
                cout << "|" << setw(4) << GetThirdMark(students[i]) << setw(3) << "|" << setw(7) << "|" << setw(6) << "|";
                break;
            }
            case Special::IN:
            {
                cout << "|" << setw(7) << "|" << setw(4) << GetThirdMark(students[i]) << setw(3) << "|" << setw(6) << "|";
                break;
            }
            default:
            {
                cout << "|" << setw(7) << "|" << setw(7) << "|" << setw(3) << GetThirdMark(students[i]) << setw(3) << "|";
                break;
            }
        }
        cout << endl;
    }
    cout << "==========================================================================" << endl;
    cout << endl << endl;
}
void randomPeople(Student* students, int size)
{
    for (size_t i = 0; i < size; i++)
    {
        students[i].Year = rand() % 5 + 1;
        students[i].Physics = rand() % 5 + 1;
        students[i].Math = rand() % 5 + 1;
        students[i].LastName = "John";
        students[i].Type_Special = (Special)(rand() % 5);
        ThirdSubjInit(students[i], (rand() % 5 + 1));

    }
}
void UserInput(Student* students, int size)
{
    for (size_t i = 0; i < size; i++)
    {
        cout << "Last Name: "; cin >> students[i].LastName;
        cout << "Course: "; cin >> students[i].Year;
        int t;
        cout << "(O.KN\n1.IN\n2.ME\n3.FI\n4.TTI)";
        cout << "Major: "; cin >> t;
        switch (t)
        {
            case 0:
            {
                students[i].Type_Special = Special::KN;
                break;
            }
            case 1:
            {
                students[i].Type_Special = Special::IN;
                break;
            }
            case 2:
            {
                students[i].Type_Special = Special::ME;
                break;
            }
            case 3:
            {
                students[i].Type_Special = Special::FI;
                break;
            }
            case 4:
            {
                students[i].Type_Special = Special::WT;
                break;
            }
            default:
            {
                cout << "You entered the incorrect data!" << endl;
                return;
            }
        }
        cout << "Physics mark: "; cin >> students[i].Physics;
        cout << "Math mark: "; cin >> students[i].Math;
        int mark;
        cout << "Third mark: "; cin >> mark;
        ThirdSubjInit(students[i], mark);
    }
}
int* IndexSort(Student* students, int size)
{
    int* I = new int[size];
    for (size_t i = 0; i < size; i++)
    {
        I[i] = i;
    }

    for (size_t i = 0; i < size; i++)
    {
        for (size_t j = 0; j < size - i - 1; j++)
        {
            int CurrStAvg = (students[I[j]].Physics + students[I[j]].Math + GetThirdMark(students[I[j]])) / 3;
            int CurrStAvg2 = (students[I[j + 1]].Physics + students[I[j + 1]].Math + GetThirdMark(students[I[j + 1]])) / 3;

            if (students[I[j]].Year > students[I[j + 1]].Year)
                swap(I[j], I[j + 1]);
            if ((students[I[j]].Year == students[I[j + 1]].Year) &&
                (CurrStAvg > CurrStAvg2))
                swap(I[j], I[j + 1]);

            if ((students[I[j]].Year == students[I[j + 1]].Year) &&
                (CurrStAvg == CurrStAvg2) &&
                (students[I[j]].LastName[0] < students[I[j + 1]].LastName[0]))
                swap(I[j], I[j + 1]);

        }
    }
    return I;
}
void sortPhysicsPpl(Student* students, int size)
{
    for (size_t i = 0; i < size; i++)
    {
        for (size_t j = 0; j < size - i - 1; j++)
        {
            int CurrStAvg = (students[j].Physics + students[j].Math + GetThirdMark(students[j])) / 3;
            int CurrStAvg2 = (students[j + 1].Physics + students[j + 1].Math + GetThirdMark(students[j + 1])) / 3;

            if (students[j].Year > students[j + 1].Year)
                swap(students[j], students[j + 1]);

            if ((students[j].Year == students[j + 1].Year) &&
                (CurrStAvg > CurrStAvg2))
                swap(students[j], students[j + 1]);

            if ((students[j].Year == students[j + 1].Year) &&
                (CurrStAvg == CurrStAvg2) &&
                (students[j].LastName[0] < students[j + 1].LastName[0]))
                swap(students[j], students[j + 1]);
        }
    }
}
void printSortedArray(Student* students, int size)
{
    int* B = IndexSort(students, size);
    cout << "Sorted Array: " << endl;
    cout << endl;
    cout << "==========================================================================" << endl;
    cout << "Number \t|Name\t|Course   |\tMajor\t | Phys|Math |Progr.|Numer.|Pedag|" << endl;
    cout << "==========================================================================" << endl;
    for (size_t i = 0; i < size; i++)
    {
        cout << i << "\t| " << students[B[i]].LastName;
        cout << " |\t" << students[B[i]].Year;
        cout << " |\t" << Specialities[(int)students[B[i]].Type_Special] << "\t";
        cout << " |" << setw(3) << students[B[i]].Physics << setw(3);
        cout << " |" << setw(3) << students[B[i]].Math << setw(3);
        //	cout << " |\t" << GetThirdMark(students[i]);
        switch (students[B[i]].Type_Special)
        {
            case Special::KN:
            {
                cout << "|" << setw(4) << GetThirdMark(students[B[i]]) << setw(3) << "|" << setw(7) << "|" << setw(6) << "|";
                break;
            }
            case Special::IN:
            {
                cout << "|" << setw(7) << "|" << setw(4) << GetThirdMark(students[B[i]]) << setw(3) << "|" << setw(6) << "|";
                break;
            }
            default:
            {
                cout << "|" << setw(7) << "|" << setw(7) << "|" << setw(3) << GetThirdMark(students[B[i]]) << setw(3) << "|";
                break;
            }
        }
        cout << endl;
    }
    cout << "==========================================================================" << endl;
    cout << endl << endl;
}
int Find(Student* students, int N)
{
//	GetThirdMark(students[m])
    cout << "Last Name: "; string ln; cin >> ln;
    cout << "Average score: ";
    int avg; cin >> avg;
    cout << "Course: "; int kurs; cin >> kurs;
    cout << endl;
    int L = 0, R = N - 1, m;     do {
        m = (L + R) / 2;
        if (((students[m].Physics + students[m].Math + GetThirdMark(students[m])) / 3)
            == avg && students[m].LastName == ln && students[m].Year == kurs)
            return m;
        if ((((students[m].Physics + students[m].Math + GetThirdMark(students[m])) / 3) < avg)
            || (((students[m].Physics + students[m].Math + GetThirdMark(students[m])) / 3) == avg
                && students[m].LastName == ln)
            || (((students[m].Physics + students[m].Math + GetThirdMark(students[m])) / 3) == avg
                && students[m].LastName == ln && students[m].Year < kurs))
        {
            L = m + 1;
        }
        else { R = m - 1; }
    } while (L <= R);     return -1;
}

void ThirdSubjInit(Student& st, int mark)
{
    switch (st.Type_Special)
    {
        case Special::KN:
        {
            st.Programming = mark;
            break;
        }
        case Special::IN:
        {
            st.NumericMethods = mark;
            break;
        }
        default:
        {
            st.Pedagogics = mark;
            break;
        }
    }
}
int GetThirdMark(Student st)
{
    switch (st.Type_Special)
    {
        case Special::KN:
            return st.Programming;
        case Special::IN:
            return st.NumericMethods;
        default:
            return st.Pedagogics;
    }
}
